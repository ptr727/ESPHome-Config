# Notes:

# Timeline:
##
## April 2023, purchased a SensOper SC-EN-I6-RO4 from IiotProducts online store.
##   Norvi online store did not ship to the US.
##   Norvi products sold under the SonsOper brand in the US.
##   GPIO pins for inputs are incorrectly documented in SensOper docs, use the Norvi docs instead.
##   DS3231: My unit was missing the DS3231 RTC as advertised, per Norvi early units did not have RTC's, current units should have RTC's.
##   ADS1115: My unit was missing the ADS1115 ADC as advertised, per Norvi the SensOper documentation is incorrect and the dedicated ADC is only present in analog input units.
##   Still waiting for SensOper to send me a correct unit that includes the DS3221.
## December 2023, purchased a Norvi NORVI-ENET-AE06-R from CarTFT online store.
##   In stock and fast shipping to the US.
## December 2023, purchased a Norvi NORVI-ENET-AE06-R from the Norvi online store.
##   Norvi online store did now offer US shipping.
##   Took almost a month to receive the unit.
## January 2024, all 3 units suffering from some sort of stability issue.
##   SensOper from IiotProduct never worked correctly, ADC drift, no WiFi on bench PSU, and missing RTC.
##   Norvi from Norvi never worked correctly, ADC drift and no WiFi on bench PSU.
##   Norvi from CarTFT worked fine for about 2 weeks, then ADC started drifting.
##   Returning all units to Norvi for inspection.
## May 2024, received new units from Norvi with design changes.
##   GPIO36/ADC1-0/SENS_VP input GND resistor changed from 47K to 10K, improves button V scale.
##   GPIO39/ADC1-3/SENS_VN has been grounded, reduces interference and drift on GPIO36 ADC.
##   Observations - SensOper SC-EN-I6-RO4:
##     This unit does have a DS3231 RTC, ok.
##     GPIO39 ADC does not appear to be grounded, ADC on GPIO39 measure 3V+.
##     GPIO36 button ADC, started at 0.14V, drifting up over time.
##     ADC is not fixed, contacted Norvi on 25 June 2024 to arrange a device swap.
##   Observations - Norvi NORVI-ENET-AE06-R (tested two units):
##     GPIO39 ADC appears to be grounded, ADC on GPIO39 measures ~0.09V/~0.14V.
##     GPIO36 button ADC, appears to remain stable at ~0.07V/~0.14V, up~=0.42V/~0.43V, down~=0.75V/~0.77V, enter~=1.61V/~1.66V, within safe ADC range.
##     ADC is fixed.

# PSU problems (TODO: Verify with May 2024 units):
## The device seems to be very sensitive to the type of PSU used.
## E.g. XP Power DIN 24V PSU, WiFi works, ADC drift.
## E.g. Meanwell DIN 24V PSU, WiFi works, ADC drift.
## E.g. USB powered, WiFi works, ADC drift.
## E.g. Rigol linear bench PSU, no WiFi, ADC drift.
## E.g. Wanptek switching bench PSU, PSU fails to sync, no WiFi, ADC drift.

# ADC problems (Corrected in May 2024 Norvi units, SensOper unit not corrected):
## Three buttons are connected with a resistor network to the internal ADC on GPIO36.
## The ADC measurements are unstable and drift.
##   The Espressif design calls for a low impedance input and a 100nF decoupling capacitor to prevent noise and drift.
##   With no buttons pressed (47K to GND) the voltage drifts from 0.6V on power on to 1.7V+ after running for several hours.
## The ESP32 specs for 11dB attenuation calls for an input voltage range of 150mV to 2450mV.
##   The resistor network voltage range goes to 2.88V with all three buttons pressed, and 2.72V with the S3 button pressed, out of range of the ADC.
## The values of the resistor network does not support multiple button press states.
##   The voltage delta between S3+S2 and S3+S2+S1 is 0.042V, and the absolute is 2.88V, that is outside the 2.45V usable range of the ADC.
## Reference Utils.h for numeric calculations

# WiFi problems (TODO: Verify with May 2024 units):
## WiFi is unstable and frequently disconnects when running from 24VDC from my programmable linear PSU or a 24V switching PSU when on my workbench.
## The same unit on the same workbench runs stable when powered from USB using the micro-USB programming plug.
## Move the unit to a DIN enclosure with a DIN switching 24V PSU and WiFi is stable.

# GPIO pin choice:
## ESP32 has strapping pins on GPIO0, GPIO2, GPIO5, GPIO12, and GPIO15.
## GPIO15 is used on the expansion port.
## Using strapping pins on external peripherals is potentially problematic, as an external device may pull GPIO15 low on boot changing SDIO slave timing.
## It may be possible to instead use GPIO12 that is used as output only, instead of GPIO15.

# Inconsistent behavior:
## My April 2023 SensOper unit had ADC and WiFi problems from day 1.
## My December 2023 Norvi supplied unit had ADC and WiFi problems from day 1.
## My December 2023 CarTFT supplied Norvi unit had stable ADC and stable WiFi on the bench, but after being in operation for about two weeks the ADC is now drifting.


# Norvi NORVI-ENET-AE06-R
# https://shop.norvi.lk/products/norvi-enet-ae06-r
# https://norvi.lk/product/industrial-esp32-ethernet/
# https://norvi.lk/docs/norvi-enet-ae06-r-norvi-enet-ae06-r-user-guide/
# https://norvi.lk/docs/norvi-enet-ae06-r-datasheet/

# SensOper SC-EN-I6-RO4
# https://sensoper.com/shop/sc-en-i6-ro4/
# https://sensoper.com/wp-content/uploads/2021/09/SC-EN-Range-Datasheet.pdf

# IIOT Products SC-EN-I6-RO4
# https://iiotproducts.com/product/sc-en-i6-ro4/
# https://iiotproducts.com/wp-content/uploads/2021/11/SC-EN-I6-RO4_SC-EN-Range-Datasheet.pdf
# https://iiotproducts.com/wp-content/uploads/2022/07/SENSOPER-SC-EN-I6-TO4.zip
# https://iiotproducts.com/wp-content/uploads/2022/07/SC-EN-I6-R04_Test_Guide.docx.pdf

# Example code:
# https://norvi.lk/docs/
# https://www.instructables.com/Working-With-Built-in-Display-and-Push-Buttons-of-/
# https://github.com/Iconic-Devices/Norvi-IoT-Devices---ESP32-based-industrial-controllers

# ADC ladder (revised May 2024 replacing 47K with 10K to GND):
# https://norvi.lk/docs/norvi-enet-ae06-r-norvi-enet-ae06-r-user-guide/
# 3.3V, S3, 10K, 10K, GND
# 3.3V, S2, 33K, 10K, GND
# 3.3V, S1, 67K, 10K, GND
# Rbutton = 1 / (1/R2 + 1/R3 + 1/R4)
# Vbutton = (Vin x R6) / (Rbutton + R6)
# S3 | S2 | S1 | Rbutton     | Vbutton     | Delta       | % of 3.3v
# 0  | 0  | 0  | âˆž           | 0           |             |
# 0  | 0  | 1  | 67000       | 0.428571429 | 0.428571429 | 12.98701299
# 0  | 1  | 0  | 33000       | 0.76744186  | 0.338870432 | 10.26880097
# 0  | 1  | 1  | 22110       | 1.027717222 | 0.260275362 | 7.887132169
# 1  | 0  | 0  | 10000       | 1.65        | 0.622282778 | 18.85705388
# 1  | 0  | 1  | 8701.298701 | 1.764583333 | 0.114583333 | 3.472222222
# 1  | 1  | 0  | 7674.418605 | 1.867105263 | 0.10252193  | 3.106725146
# 1  | 1  | 1  | 6885.705388 | 1.954315751 | 0.087210487 | 2.642742045
# ADC multi-sample: https://docs.espressif.com/projects/esp-idf/en/v4.3.2/esp32/api-reference/peripherals/adc.html

# ESP32-WROOM32
## ESP32 Dev Module
## Flash Mode QIO
## Flash Size 4MB
## Flash Frequency 10MHz
## PSRAM Disabled
## Upload Speed 115200

# ADC ADS1115
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x48
## Resolution 16 bit

# OLED SSD1306
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x3C
## Resolution 128 x 64

# Ethernet W5500
## SCLK IO18
## MISO IO19
## MOSI IO23
## SCSn IO26
## RSTn IO27
## IO5 CS of microSD should be High for the W5500

# RTC DS3231
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x68
## Reset IO21
## Battery Backup YES

# microSD Card
## SCK IO18
## MISO IO19
## MOSI IO23
## CS IO5 (strapping)
## SD Detect IO14

# Buttons
## ADC
## IO36
## Resistor network: 3.3V to S1/S2/S3, 10K to GND, S1 67K, S2 33K, S3 10K

# I2C
## SDA IO16
## SCL IO17

# Expansion Port
## 1 Not Connected
## 2 TXD0 / IO1
## 3 5V
## 4 RXD0 / IO3
## 5 BOOT IO0
## 6 IO15 (strapping)
## 7 3.3V
## 8 SCL / IO17
## 9 Ground
## 10 SDA / IO16

# Relay Output
## R0 IO2
## R1 IO4
## R2 IO12 (strapping)
## R3 IO13

# Source / Sink Input
## I0 IO21
## I1 IO14
## I2 IO33
## I3 IO34
## I4 IO35
## I5 IO25
## I6 IO32
## I7 IO22

# ESPHome support:
## DS3231 is compatible with the DS1307
## https://github.com/esphome/feature-requests/issues/515
## https://esp-idf-lib.readthedocs.io/en/latest/groups/ds3231.html
##
## microSD card IO is not yet supported
## https://github.com/esphome/feature-requests/issues/513

# Required substitutions:
# device_name
# device_comment

# https://esphome.io/components/esphome
esphome:
  name: ${device_name}
  comment: ${device_comment}
  on_boot:
    - priority: 600
      then:
        # Read the time from the RTC
        - ds1307.read_time:
  includes:
    # Utility functions
    templates/Utils.h

# https://esphome.io/components/esp32
esp32:
  # https://docs.platformio.org/en/latest/boards/espressif32/esp32dev.html
  board: esp32dev
  framework:
    type: esp-idf

# https://esphome.io/guides/configuration-types.html#local-packages
packages:
  common: !include common.yaml

# https://esphome.io/components/external_components.html
external_components:

  # https://github.com/ssieb/esphome_components/tree/master/components/analog_keypad
  - source: github://ssieb/esphome_components
    components: [ analog_keypad ]

  # https://github.com/esphome/esphome/pull/6985
  - source: github://pr#6985
    components: [ ds1307 ]

# https://esphome.io/components/i2c
i2c:
  sda: GPIO16
  scl: GPIO17
  # Increase speed to prevent component took a long time errors
  # https://github.com/esphome/issues/issues/4717#issuecomment-1643391691
  frequency: 400kHz

# Add to common.yaml time configuration
# https://esphome.io/components/time
time:

  # DS3231 is compatible with DS1307 RTC
  # https://esphome.io/components/time/ds1307
  - platform: ds1307
    id: ds1307_time
    address: 0x68
    # Use HA for time sync
    update_interval: never

  # https://esphome.io/components/time/homeassistant
  - platform: homeassistant
    # Update RTC on time sync
    on_time_sync:
      then:
        ds1307.write_time:

# https://esphome.io/components/display/index.html
font:
  - file:
      type: gfonts
      family: Open+Sans
    id: fonnt # font as id is reserved
    size: 13

# https://esphome.io/components/display/ssd1306.html
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: displayy # display as id is reserved
    # https://github.com/esphome/esphome/blob/release/esphome/components/display/display.h
    # Use !extend displayy to replace the display lambda
    lambda: |-
      static const auto color = Color(255, 255, 255);
      static const auto font = id(fonnt);
      static const auto lineSpacing = DisplayHelper::GetLineSpacing(&it, font, 4);
      const auto time = id(homeassistant_time).now();
      const auto ip = id(wifi_ip).state.c_str();
      const auto adc = id(adc_buttons).state;
      const auto adcn = id(adc_vn).state;
      int line = lineSpacing.nFirstLine;
      it.printf(0, line, font, color, TextAlign::TOP_LEFT, "IP: %s", ip);
      line += lineSpacing.nIncrement;
      it.strftime(0, line, font, color, TextAlign::TOP_LEFT, "Time: %H:%M:%S", time);
      line += lineSpacing.nIncrement;
      it.printf(0, line, font, color, TextAlign::TOP_LEFT, "ADC: %.2fV", adc);
      line += lineSpacing.nIncrement;
      it.printf(0, line, font, color, TextAlign::TOP_LEFT, "ADCN: %.2fV", adcn);
      line += lineSpacing.nIncrement;

# https://esphome.io/components/sensor/
sensor:

  # https://esphome.io/components/sensor/adc.html
  - platform: adc
    pin: GPIO36
    name: ${device_name}_adc_buttons
    id: adc_buttons
    attenuation: 12db
    update_interval: 5s #never
    samples: 64
    # internal: true

  # Test ADC VN grounded
  - platform: adc
    pin: GPIO39
    name: ${device_name}_adc_vn
    id: adc_vn
    attenuation: 12db
    update_interval: 5s
    samples: 64

# https://github.com/ssieb/esphome_components/tree/master/components/analog_keypad
analog_keypad:
  sensor: adc_buttons
  debounce_time: 100
  keys:
    - voltage: 0.429
      variance: 0.1
      key: U # Up
    - voltage: 0.767
      variance: 0.1
      key: D # Down
    - voltage: 1.650
      variance: 0.1
      key: E # Enter

# https://esphome.io/components/switch
switch:

  # https://esphome.io/components/switch/gpio.html
  - platform: gpio
    name: ${device_name}_relay_0
    id: relay_0
    pin:
      number: GPIO2
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_1
    id: relay_1
    pin: GPIO4
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_2
    id: relay_2
    pin:
      number: GPIO12
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_3
    id: relay_3
    pin: GPIO13
    restore_mode: ALWAYS_OFF

# https://esphome.io/components/binary_sensor/
binary_sensor:


  # https://github.com/ssieb/esphome_components/tree/master/components/analog_keypad
  - platform: analog_keypad
    name: ${device_name}_button_up
    id: button_up
    key: U
  - platform: analog_keypad
    name: ${device_name}_button_down
    id: button_down
    key: D
  - platform: analog_keypad
    name: ${device_name}_button_enter
    id: button_enter
    key: E

# Input handling to be defined in the device config as gpio, pulse counters, etc.
# https://esphome.io/components/binary_sensor/gpio.html
# - platform: gpio
#   pin:
#     number: GPIO21
#     inverted: true
#
# https://esphome.io/components/sensor/pulse_counter.html
# - platform: pulse_counter
#   pin:
#     number: GPIO21
#     inverted: true

# GPIO15 from the expansion bus can be used for e.g. 1-Wire Dallas
# https://esphome.io/components/one_wire
# one_wire:
#   - platform: gpio
#     pin: GPIO15
