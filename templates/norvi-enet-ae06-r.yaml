# Required substitutions:
# device_name
# device_comment

# Norvi NORVI-ENET-AE06-R
# SensOper SC-EN-I6-RO4
# https://shop.norvi.lk/products/norvi-enet-ae06-r
# https://norvi.lk/product/industrial-esp32-ethernet/
# https://norvi.lk/docs/norvi-enet-ae06-r-norvi-enet-ae06-r-user-guide/
# https://norvi.lk/docs/norvi-enet-ae06-r-datasheet/
# https://sensoper.com/shop/sc-en-i6-ro4/
# https://sensoper.com/wp-content/uploads/2021/09/SC-EN-Range-Datasheet.pdf
# https://iiotproducts.com/product/sc-en-i6-ro4/
# https://iiotproducts.com/wp-content/uploads/2021/11/SC-EN-I6-RO4_SC-EN-Range-Datasheet.pdf
# https://iiotproducts.com/wp-content/uploads/2022/07/SENSOPER-SC-EN-I6-TO4.zip
# https://iiotproducts.com/wp-content/uploads/2022/07/SC-EN-I6-R04_Test_Guide.docx.pdf

# ESP32-WROOM32
## ESP32 Dev Module
## Flash Mode QIO
## Flash Size 4MB
## Flash Frequency 10MHz
## PSRAM Disabled
## Upload Speed 115200

# ADC ADS1115
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x48
## Resolution 16 bit

# OLED SSD1306
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x3C
## Resolution 128 x 64

# Ethernet W5500
## SCLK IO18
## MISO IO19
## MOSI IO23
## SCSn IO26
## RSTn IO27
## IO5 CS of microSD should be High for the W5500

# RTC DS3231
## I2C IO16(SDA) - IO17(SCL)
## Module Address 0x68
## Reset IO21
# Battery Backup YES

# microSD Card
## SCK IO18
## MISO IO19
## MOSI IO23
## CS IO5
## SD Detect IO14

# Buttons
## ADC
## IO36
## Voltage levels 3

# Expansion
## 1 Not Connected
## 2 TXD0
## 3 5V
## 4 RXD0
## 5 BOOT IO0
## 6 IO15
## 7 3.3V
## 8 SCL IO17
## 9 Ground
## 10 SDA IO16

# Relay Output
## R0 IO2
## R1 IO4
## R2 IO12
## R3 IO13

# Source / Sink Input (SensOper docs are wrong, Norvi docs are correct)
## I0 IO21
## I1 IO14
## I2 IO33
## I3 IO34
## I4 IO35
## I5 IO25
## I6 IO32
## I7 IO22

# ADS1115 not present in I6-RO4
# DS3231 not present in I6-RO4, it is documented as supported?

# DS3231 not yet supported
# https://github.com/esphome/feature-requests/issues/515

# WS5500 not yet supported
# https://github.com/esphome/esphome/pull/4424

# microSD card not yet supported
# https://github.com/esphome/feature-requests/issues/513

# https://esphome.io/components/esphome
esphome:
  name: ${device_name}
  comment: ${device_comment}

# https://esphome.io/components/esp32
esp32:
    board: esp32dev

# https://esphome.io/guides/configuration-types.html#local-packages
packages:
  common: !include common.yaml
  memory_sensor:  !include esp32-memory-sensor.yaml

# https://esphome.io/components/i2c
i2c:
  sda: GPIO16
  scl: GPIO17
  scan: true
  # https://github.com/esphome/issues/issues/4717#issuecomment-1643391691
  frequency: 400kHz

# Use expansion slot Pin6 GPIO15 for Dallas
# https://esphome.io/components/sensor/dallas.html
dallas:
  # TODO: How to add ignore_strapping_warning: true
  # https://github.com/esphome/feature-requests/issues/2499
  # WARNING GPIO15 is a strapping PIN and should only be used for I/O with care.
  - pin: GPIO15
    update_interval: 5s

# https://esphome.io/components/display/index.html
font:
  - file:
      type: gfonts
      family: Open+Sans
    id: fonnt
    size: 14

# https://esphome.io/components/display/ssd1306.html
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    # TODO: How to get font height in pixels?
    # TextAlign: TOP_LEFT, TOP_RIGHT, BASELINE_LEFT
    # print (int x, int y, BaseFont *font, Color color, TextAlign align, const char *text)
    # printf (int x, int y, BaseFont *font, TextAlign align, const char *format,...)
    # https://strftime.org/
    # strftime (int x, int y, BaseFont *font, Color color, TextAlign align, const char *format, ESPTime time)
    lambda: |-
      const auto color = Color(255, 255, 255);
      const auto font = id(fonnt);
      const int fontHeight = 24;
      int line = 0;
      const auto time = id(homeassistant_time).now();
      const auto ip = id(wifi_ip).state.c_str();
      // const auto tmp = id(temp).state;
      const auto adc = id(adc_buttons).state;
      it.printf(0, line, font, color, TextAlign::TOP_LEFT, "IP: %s", ip);
      line += fontHeight;
      // it.printf(0, line, font, color, TextAlign::TOP_LEFT, "Temp: %.2fÂ°C", tmp);
      it.printf(0, line, font, color, TextAlign::TOP_LEFT, "ADC: %.3fV", adc);
      line += fontHeight;
      it.strftime(0, line, font, color, TextAlign::TOP_LEFT, "Time: %H:%M:%S", time);
      line += fontHeight;

# https://esphome.io/components/sensor/
sensor:

  # Dallas sensors need to be handled in the device
  # https://esphome.io/components/sensor/dallas.html
  # - platform: dallas
  #   address: 0xC7012026F75E6028
  #   name: ${device_name}_temp
  #   id: temp
  #   # https://esphome.io/components/sensor/index.html#sliding-window-moving-average
  #   filters:
  #     - sliding_window_moving_average:
  #         window_size: 3
  #         send_every: 3
  #         send_first_at: 3

  # https://esphome.io/components/sensor/adc.html
  - platform: adc
    pin: GPIO36
    name: ${device_name}_adc_buttons
    id: adc_buttons
    # Use 11dB attenuation for ~0 to ~2.9V input
    attenuation: 11db
    # Update fast enough to make button presses responsive
    update_interval: 500ms
    # Average values, update interval divided by send_every
    # https://esphome.io/components/sensor/index.html#sliding-window-moving-average
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 3
          send_first_at: 3
    # Used internally only, do not report to HA
    # internal: true

# https://esphome.io/components/switch/index.html
switch:

  # https://esphome.io/components/switch/gpio.html
  - platform: gpio
    name: ${device_name}_relay_0
    id: relay_0
    pin: 
      number: GPIO2
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_1
    id: relay_1
    pin: GPIO4
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_2
    id: relay_2
    pin: 
      number: GPIO12
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: ${device_name}_relay_3
    id: relay_3
    pin: GPIO13
    restore_mode: ALWAYS_OFF

# https://esphome.io/components/binary_sensor/
binary_sensor:

  # https://esphome.io/components/binary_sensor/gpio.html
  # Inputs need to be handled in the device as GPIO, pulse counters, etc.
  # - platform: gpio
  #   name: ${device_name}_input_0
  #   id: input_0
  #   pin: 
  #     number: GPIO21
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_1
  #   id: input_1
  #   pin: 
  #     number: GPIO14
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_2
  #   id: input_2
  #   pin: 
  #     number: GPIO33
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_3
  #   id: input_3
  #   pin: 
  #     number: GPIO34
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_4
  #   id: input_4
  #   pin: 
  #     number: GPIO35
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_5
  #   id: input_5
  #   pin: 
  #     number: GPIO25
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_6
  #   id: input_6
  #   pin: 
  #     number: GPIO32
  #     inverted: true
  # - platform: gpio
  #   name: ${device_name}_input_7
  #   id: input_7
  #   pin: 
  #     number: GPIO22
  #     inverted: true

  # https://esphome.io/components/binary_sensor/template.html
  # Convert ADC input to button presses
  ## Resistor network: 3.3V, S3 10K, S2 33K, S1 67K, 47K GND
  ## USe 0.2V +/- window
  ## None  : 0
  ## Up    : 1.361V, 1.161 - 1.561
  ## Down  : 1.939V, 1.739 - 2.139
  ## Enter : 2.721V, 2.521 - 2.921
  - platform: template
    name: ${device_name}_button_up
    id: button_up
    lambda: |-
      const auto adc = id(adc_buttons).state;
      return (adc > 1.161 && adc < 1.561);
  - platform: template
    name: ${device_name}_button_down
    id: button_down
    lambda: |-
      const auto adc = id(adc_buttons).state;
      return (adc > 1.739 && adc < 2.139);
  - platform: template
    name: ${device_name}_button_enter
    id: button_enter
    lambda: |-
      const auto adc = id(adc_buttons).state;
      return (adc > 2.521 && adc < 2.921);
